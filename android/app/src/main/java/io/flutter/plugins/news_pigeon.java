// Autogenerated from Pigeon (v12.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class news_pigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /**
   *
   *
   *
   * Generated class from Pigeon that represents data sent in messages.
   */
  public static final class NewsArticleSourceModelPigeon {
    private @Nullable String id;

    public @Nullable String getId() {
      return id;
    }

    public void setId(@Nullable String setterArg) {
      this.id = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    public static final class Builder {

      private @Nullable String id;

      public @NonNull Builder setId(@Nullable String setterArg) {
        this.id = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      public @NonNull NewsArticleSourceModelPigeon build() {
        NewsArticleSourceModelPigeon pigeonReturn = new NewsArticleSourceModelPigeon();
        pigeonReturn.setId(id);
        pigeonReturn.setName(name);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(id);
      toListResult.add(name);
      return toListResult;
    }

    static @NonNull NewsArticleSourceModelPigeon fromList(@NonNull ArrayList<Object> list) {
      NewsArticleSourceModelPigeon pigeonResult = new NewsArticleSourceModelPigeon();
      Object id = list.get(0);
      pigeonResult.setId((String) id);
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class NewsArticleModelPigeon {
    private @Nullable NewsArticleSourceModelPigeon source;

    public @Nullable NewsArticleSourceModelPigeon getSource() {
      return source;
    }

    public void setSource(@Nullable NewsArticleSourceModelPigeon setterArg) {
      this.source = setterArg;
    }

    private @Nullable String author;

    public @Nullable String getAuthor() {
      return author;
    }

    public void setAuthor(@Nullable String setterArg) {
      this.author = setterArg;
    }

    private @Nullable String title;

    public @Nullable String getTitle() {
      return title;
    }

    public void setTitle(@Nullable String setterArg) {
      this.title = setterArg;
    }

    private @Nullable String description;

    public @Nullable String getDescription() {
      return description;
    }

    public void setDescription(@Nullable String setterArg) {
      this.description = setterArg;
    }

    private @Nullable String url;

    public @Nullable String getUrl() {
      return url;
    }

    public void setUrl(@Nullable String setterArg) {
      this.url = setterArg;
    }

    private @Nullable String urlToImage;

    public @Nullable String getUrlToImage() {
      return urlToImage;
    }

    public void setUrlToImage(@Nullable String setterArg) {
      this.urlToImage = setterArg;
    }

    private @Nullable String publishedAt;

    public @Nullable String getPublishedAt() {
      return publishedAt;
    }

    public void setPublishedAt(@Nullable String setterArg) {
      this.publishedAt = setterArg;
    }

    private @Nullable String content;

    public @Nullable String getContent() {
      return content;
    }

    public void setContent(@Nullable String setterArg) {
      this.content = setterArg;
    }

    public static final class Builder {

      private @Nullable NewsArticleSourceModelPigeon source;

      public @NonNull Builder setSource(@Nullable NewsArticleSourceModelPigeon setterArg) {
        this.source = setterArg;
        return this;
      }

      private @Nullable String author;

      public @NonNull Builder setAuthor(@Nullable String setterArg) {
        this.author = setterArg;
        return this;
      }

      private @Nullable String title;

      public @NonNull Builder setTitle(@Nullable String setterArg) {
        this.title = setterArg;
        return this;
      }

      private @Nullable String description;

      public @NonNull Builder setDescription(@Nullable String setterArg) {
        this.description = setterArg;
        return this;
      }

      private @Nullable String url;

      public @NonNull Builder setUrl(@Nullable String setterArg) {
        this.url = setterArg;
        return this;
      }

      private @Nullable String urlToImage;

      public @NonNull Builder setUrlToImage(@Nullable String setterArg) {
        this.urlToImage = setterArg;
        return this;
      }

      private @Nullable String publishedAt;

      public @NonNull Builder setPublishedAt(@Nullable String setterArg) {
        this.publishedAt = setterArg;
        return this;
      }

      private @Nullable String content;

      public @NonNull Builder setContent(@Nullable String setterArg) {
        this.content = setterArg;
        return this;
      }

      public @NonNull NewsArticleModelPigeon build() {
        NewsArticleModelPigeon pigeonReturn = new NewsArticleModelPigeon();
        pigeonReturn.setSource(source);
        pigeonReturn.setAuthor(author);
        pigeonReturn.setTitle(title);
        pigeonReturn.setDescription(description);
        pigeonReturn.setUrl(url);
        pigeonReturn.setUrlToImage(urlToImage);
        pigeonReturn.setPublishedAt(publishedAt);
        pigeonReturn.setContent(content);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(8);
      toListResult.add((source == null) ? null : source.toList());
      toListResult.add(author);
      toListResult.add(title);
      toListResult.add(description);
      toListResult.add(url);
      toListResult.add(urlToImage);
      toListResult.add(publishedAt);
      toListResult.add(content);
      return toListResult;
    }

    static @NonNull NewsArticleModelPigeon fromList(@NonNull ArrayList<Object> list) {
      NewsArticleModelPigeon pigeonResult = new NewsArticleModelPigeon();
      Object source = list.get(0);
      pigeonResult.setSource((source == null) ? null : NewsArticleSourceModelPigeon.fromList((ArrayList<Object>) source));
      Object author = list.get(1);
      pigeonResult.setAuthor((String) author);
      Object title = list.get(2);
      pigeonResult.setTitle((String) title);
      Object description = list.get(3);
      pigeonResult.setDescription((String) description);
      Object url = list.get(4);
      pigeonResult.setUrl((String) url);
      Object urlToImage = list.get(5);
      pigeonResult.setUrlToImage((String) urlToImage);
      Object publishedAt = list.get(6);
      pigeonResult.setPublishedAt((String) publishedAt);
      Object content = list.get(7);
      pigeonResult.setContent((String) content);
      return pigeonResult;
    }
  }

  private static class NewsArticleHostApiCodec extends StandardMessageCodec {
    public static final NewsArticleHostApiCodec INSTANCE = new NewsArticleHostApiCodec();

    private NewsArticleHostApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return NewsArticleModelPigeon.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return NewsArticleSourceModelPigeon.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof NewsArticleModelPigeon) {
        stream.write(128);
        writeValue(stream, ((NewsArticleModelPigeon) value).toList());
      } else if (value instanceof NewsArticleSourceModelPigeon) {
        stream.write(129);
        writeValue(stream, ((NewsArticleSourceModelPigeon) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NewsArticleHostApi {

    void sendNewsDetail(@NonNull NewsArticleModelPigeon newsArticleModel);

    /** The codec used by NewsArticleHostApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return NewsArticleHostApiCodec.INSTANCE;
    }
    /**Sets up an instance of `NewsArticleHostApi` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable NewsArticleHostApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.news_app.NewsArticleHostApi.sendNewsDetail", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                NewsArticleModelPigeon newsArticleModelArg = (NewsArticleModelPigeon) args.get(0);
                try {
                  api.sendNewsDetail(newsArticleModelArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
